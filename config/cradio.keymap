#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Layer definitions
#define BASE 0
#define NAV 1
#define NUM 2
#define SYM 3

/ {
  macros {
    write_vim: write_vim{
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp COLON>, <&kp W>, <&kp ENTER>;
    };
  };
  combos {
      compatible = "zmk,combos";
      combo_esc {
        timeout-ms = <60>;
        key-positions = <0 1>;
        bindings = <&kp ESC>;
      };
      combo_enter {
        timeout-ms = <60>;
        key-positions = <14 15>;
        bindings = <&kp ENTER>;
      };
      combo_write_vim {
        timeout-ms = <60>;
        key-positions = <8 9>;
        bindings = <&write_vim>;
      };
      combo_caps_lock {
        timeout-ms = <60>;
        key-positions = <21 22 23>;
        bindings = <&caps_word>;
      };
      combo_shift_left {
        timeout-ms = <60>;
        key-positions = <1 2>;
        bindings = <&kp LEFT_SHIFT>;
      };
      combo_shift_right {
        timeout-ms = <60>;
        key-positions = <7 8>;
        bindings = <&kp RIGHT_SHIFT>;
      };
      combo_ctrl_left {
        timeout-ms = <60>;
        key-positions = <11 12>;
        bindings = <&kp LEFT_CONTROL>;
      };
      combo_ctrl_right {
        timeout-ms = <60>;
        key-positions = <17 18>;
        bindings = <&kp RIGHT_CONTROL>;
      };
      combo_alt_left {
        timeout-ms = <60>;
        key-positions = <12 13>;
        bindings = <&kp LEFT_ALT>;
      };
      combo_alt_right {
        timeout-ms = <60>;
        key-positions = <16 17>;
        bindings = <&kp RIGHT_ALT>;
      };
  };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
       &kp Q  &kp W  &kp E  &kp R    &kp T                     &kp Y     &kp U    &kp I     &kp O    &kp P
       &kp A  &kp S  &kp D  &kp F    &kp G                     &kp H     &kp J    &kp K     &kp L    &kp SEMICOLON
       &kp Z  &kp X  &kp C  &kp V    &kp B                     &kp N     &kp M    &kp COMMA &kp DOT  &kp SLASH
                            &mo NAV  &mt LEFT_META SPACE       &kp BACKSPACE  &sl NUM
      >;
    };
    navigation {
      bindings = <
      &none  &none  &none  &none  &none                            &kp PAGE_UP    &none     &kp UP    &none      &none
      &none  &none  &none  &none  &none                            &kp TAB        &kp LEFT  &kp DOWN &kp RIGHT  &none
      &none  &none  &none  &none  &none                            &kp PAGE_DOWN  &none     &none     &none      &none
                     &none &mt LEFT_META SPACE                     &kp BACKSPACE  &sl SYM
      >;
    };
    numbers {
      bindings = <
        &kp F1  &kp F2  &kp F3  &kp F4  &kp F5                 &kp F6                   &kp F7  &kp F8  &kp F9  &kp F10
        &kp N1  &kp N2  &kp N3  &kp N4  &kp N5                 &kp N6                   &kp N7  &kp N8  &kp N9  &kp N0
        &kp F11 &none   &none   &none   &none                  &none                    &none   &none   &none   &kp F12
                            &mo SYM  &mt LEFT_META SPACE       &kp BACKSPACE  &none
      >;
    };
    symbols {
      bindings = <
      &kp EXCL     &kp AT       &kp HASH     &kp DLLR     &kp PERCENT            &kp CARET  &kp AMPERSAND  &kp STAR   &kp MINUS  &kp EQUAL 
      &kp GRAVE    &kp LBRC  &kp LBKT   &kp LPAR  &kp LT              &kp GT    &kp RPAR   &kp RBKT    &kp RBRC  &kp SINGLE_QUOTE  
      &none &none   &none   &none   &none                           &none      &none   &none   &none   &kp BACKSLASH
                            &none &kp SPACE                    &kp BACKSPACE  &none
      >;
    };
  };
}; 
